From yangyingliang@huawei.com  Thu Jul 15 19:31:46 2021
From: Yang Yingliang <yangyingliang@huawei.com>
Date: Thu, 15 Jul 2021 21:18:25 +0800
Subject: io_uring: fix clear IORING_SETUP_R_DISABLED in wrong function
To: <linux-kernel@vger.kernel.org>, <stable@vger.kernel.org>
Cc: <gregkh@linuxfoundation.org>, <axboe@kernel.dk>
Message-ID: <20210715131825.2410912-1-yangyingliang@huawei.com>

From: Yang Yingliang <yangyingliang@huawei.com>

In commit 3ebba796fa25 ("io_uring: ensure that SQPOLL thread is started for exit"),
the IORING_SETUP_R_DISABLED is cleared in io_sq_offload_start(), but when backport
it to stable-5.10, IORING_SETUP_R_DISABLED is cleared in __io_req_task_submit(),
move clearing IORING_SETUP_R_DISABLED to io_sq_offload_start() to fix this.

Fixes: 6cae8095490ca ("io_uring: ensure that SQPOLL thread is started for exit")
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---
 fs/io_uring.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@ -2087,7 +2087,6 @@ static void __io_req_task_submit(struct
 		__io_req_task_cancel(req, -EFAULT);
 	mutex_unlock(&ctx->uring_lock);
 
-	ctx->flags &= ~IORING_SETUP_R_DISABLED;
 	if (ctx->flags & IORING_SETUP_SQPOLL)
 		io_sq_thread_drop_mm();
 }
@@ -7992,6 +7991,7 @@ static void io_sq_offload_start(struct i
 {
 	struct io_sq_data *sqd = ctx->sq_data;
 
+	ctx->flags &= ~IORING_SETUP_R_DISABLED;
 	if ((ctx->flags & IORING_SETUP_SQPOLL) && sqd->thread)
 		wake_up_process(sqd->thread);
 }
