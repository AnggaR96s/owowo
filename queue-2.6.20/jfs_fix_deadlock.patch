From: Dave Kleikamp <shaggy@linux.vnet.ibm.com>
Date: Wed Jan 17 21:18:35 2007 -0600
Subject: JFS: call io_schedule() instead of schedule() to avoid deadlock

From: Dave Kleikamp <shaggy@linux.vnet.ibm.com>

JFS: call io_schedule() instead of schedule() to avoid deadlock

The introduction of Jens Axboe's explicit i/o plugging patches introduced a
deadlock in jfs.  This was caused by the process initiating I/O not
unplugging the queue before waiting on the commit thread.  The commit
thread itself was waiting for that I/O to complete.  Calling io_schedule()
rather than schedule() unplugs the I/O queue avoiding the deadlock, and it
appears to be the right function to call in any case.

Signed-off-by: Dave Kleikamp <shaggy@austin.ibm.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>


---
 fs/jfs/jfs_lock.h     |    2 +-
 fs/jfs/jfs_metapage.c |    2 +-
 fs/jfs/jfs_txnmgr.c   |    2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

--- linux-2.6.20.1.orig/fs/jfs/jfs_lock.h
+++ linux-2.6.20.1/fs/jfs/jfs_lock.h
@@ -42,7 +42,7 @@ do {							\
 		if (cond)				\
 			break;				\
 		unlock_cmd;				\
-		schedule();				\
+		io_schedule();				\
 		lock_cmd;				\
 	}						\
 	current->state = TASK_RUNNING;			\
--- linux-2.6.20.1.orig/fs/jfs/jfs_metapage.c
+++ linux-2.6.20.1/fs/jfs/jfs_metapage.c
@@ -56,7 +56,7 @@ static inline void __lock_metapage(struc
 		set_current_state(TASK_UNINTERRUPTIBLE);
 		if (metapage_locked(mp)) {
 			unlock_page(mp->page);
-			schedule();
+			io_schedule();
 			lock_page(mp->page);
 		}
 	} while (trylock_metapage(mp));
--- linux-2.6.20.1.orig/fs/jfs/jfs_txnmgr.c
+++ linux-2.6.20.1/fs/jfs/jfs_txnmgr.c
@@ -135,7 +135,7 @@ static inline void TXN_SLEEP_DROP_LOCK(w
 	add_wait_queue(event, &wait);
 	set_current_state(TASK_UNINTERRUPTIBLE);
 	TXN_UNLOCK();
-	schedule();
+	io_schedule();
 	current->state = TASK_RUNNING;
 	remove_wait_queue(event, &wait);
 }
