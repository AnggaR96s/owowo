From bart.vanassche@gmail.com  Thu Oct 23 13:40:27 2008
From: Bart Van Assche <bart.vanassche@gmail.com>
Date: Tue, 21 Oct 2008 19:05:50 +0200
Subject: Regression: inclusion of <linux/module.h> triggers a compiler warning
To: stable@kernel.org
Cc: Vladislav Bolkhovitin <vst@vlnb.net>, Andrew Morton <akpm@linux-foundation.org>, Linus Torvalds <torvalds@linux-foundation.org>, Dave Young <hidave.darkstar@gmail.com>
Message-ID: <200810211905.50915.bart.vanassche@gmail.com>
Content-Disposition: inline

From: Bart Van Assche <bart.vanassche@gmail.com>

Not upstream, only a 2.6.27-stable issue.

When compiling kernel modules against the 2.6.27, 2.6.27.1 or 2.6.27.2 kernel
headers, a compiler warning similar to the following is reported:

CC [M]  trunk/scst/src/scst_targ.o
In file included from include/linux/kernel.h:19,
                from include/asm/system.h:11,
                from include/asm/processor.h:18,
                from include/linux/prefetch.h:15,
                from include/linux/list.h:7,
                from include/linux/module.h:10,
                from trunk/scst/src/scst_main.c:20:
include/linux/ratelimit.h: In function 'ratelimit':
include/linux/ratelimit.h:23: warning: missing initializer
include/linux/ratelimit.h:23: warning: (near initialization for 'rs.printed')

This issue was introduced through commit
717115e1a5856b57af0f71e1df7149108294fc10
(http://git.kernel.org/?p=linux/kernel/git/stable/linux-2.6.27.y.git;a=commit;h=717115e1a5856b57af0f71e1df7149108294fc10).
I have added the people who signed this patch in CC.

The patch below fixes this warning, without changing the semantics of the code.

Signed-off-by: Bart Van Assche <bart.vanassche@gmail.com>
Acked-by: Dave Young <hidave.darkstar@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 include/linux/ratelimit.h |    5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

--- a/include/linux/ratelimit.h
+++ b/include/linux/ratelimit.h
@@ -13,8 +13,9 @@ struct ratelimit_state {
 	unsigned long begin;
 };
 
-#define DEFINE_RATELIMIT_STATE(name, interval, burst)		\
-		struct ratelimit_state name = {interval, burst,}
+#define DEFINE_RATELIMIT_STATE(name, interval_value, burst_value)	  \
+	struct ratelimit_state name					  \
+		= { .interval = (interval_value), .burst = (burst_value) }
 
 extern int __ratelimit(struct ratelimit_state *rs);
 
