From foo@baz Tue Oct  4 03:42:54 PM CEST 2022
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date: Tue, 4 Oct 2022 15:17:54 +0200
Subject: Revert "drm/i915/pps: Split pps_init_delays() into distinct parts"

From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

This reverts commit ad719d5cc7cb5fce0cee9d38ce4913339cb7e1dc which is
commit 75bd0d5e4eadb9ce3e9b6fb71971b6e87c38799e upstream.

This is part of a series of i915 patches that were backported to 5.19.12
but found to be incomplete and caused problems on many systems so they
are being reverted.

Reported-by: Jerry Ling <jiling@cern.ch>
Reported-by: Hans de Goede <hdegoede@redhat.com>
Cc: Thorsten Leemhuis <regressions@leemhuis.info>
Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
Cc: Jani Nikula <jani.nikula@intel.com>
Cc: Sasha Levin <sashal@kernel.org>
Link: https://lore.kernel.org/all/55905860-adf9-312c-69cc-491ac8ce1a8b@cern.ch/
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---
 drivers/gpu/drm/i915/display/intel_pps.c |   66 ++++++++-----------------------
 1 file changed, 18 insertions(+), 48 deletions(-)

--- a/drivers/gpu/drm/i915/display/intel_pps.c
+++ b/drivers/gpu/drm/i915/display/intel_pps.c
@@ -1159,83 +1159,53 @@ intel_pps_verify_state(struct intel_dp *
 	}
 }
 
-static void pps_init_delays_cur(struct intel_dp *intel_dp,
-				struct edp_power_seq *cur)
+static void pps_init_delays(struct intel_dp *intel_dp)
 {
 	struct drm_i915_private *dev_priv = dp_to_i915(intel_dp);
+	struct edp_power_seq cur, vbt, spec,
+		*final = &intel_dp->pps.pps_delays;
 
 	lockdep_assert_held(&dev_priv->pps_mutex);
 
-	intel_pps_readout_hw_state(intel_dp, cur);
-
-	intel_pps_dump_state(intel_dp, "cur", cur);
-}
+	/* already initialized? */
+	if (final->t11_t12 != 0)
+		return;
 
-static void pps_init_delays_vbt(struct intel_dp *intel_dp,
-				struct edp_power_seq *vbt)
-{
-	struct drm_i915_private *dev_priv = dp_to_i915(intel_dp);
+	intel_pps_readout_hw_state(intel_dp, &cur);
 
-	*vbt = dev_priv->vbt.edp.pps;
+	intel_pps_dump_state(intel_dp, "cur", &cur);
 
+	vbt = dev_priv->vbt.edp.pps;
 	/* On Toshiba Satellite P50-C-18C system the VBT T12 delay
 	 * of 500ms appears to be too short. Ocassionally the panel
 	 * just fails to power back on. Increasing the delay to 800ms
 	 * seems sufficient to avoid this problem.
 	 */
 	if (dev_priv->quirks & QUIRK_INCREASE_T12_DELAY) {
-		vbt->t11_t12 = max_t(u16, vbt->t11_t12, 1300 * 10);
+		vbt.t11_t12 = max_t(u16, vbt.t11_t12, 1300 * 10);
 		drm_dbg_kms(&dev_priv->drm,
 			    "Increasing T12 panel delay as per the quirk to %d\n",
-			    vbt->t11_t12);
+			    vbt.t11_t12);
 	}
-
 	/* T11_T12 delay is special and actually in units of 100ms, but zero
 	 * based in the hw (so we need to add 100 ms). But the sw vbt
 	 * table multiplies it with 1000 to make it in units of 100usec,
 	 * too. */
-	vbt->t11_t12 += 100 * 10;
-
-	intel_pps_dump_state(intel_dp, "vbt", vbt);
-}
-
-static void pps_init_delays_spec(struct intel_dp *intel_dp,
-				 struct edp_power_seq *spec)
-{
-	struct drm_i915_private *dev_priv = dp_to_i915(intel_dp);
-
-	lockdep_assert_held(&dev_priv->pps_mutex);
+	vbt.t11_t12 += 100 * 10;
 
 	/* Upper limits from eDP 1.3 spec. Note that we use the clunky units of
 	 * our hw here, which are all in 100usec. */
-	spec->t1_t3 = 210 * 10;
-	spec->t8 = 50 * 10; /* no limit for t8, use t7 instead */
-	spec->t9 = 50 * 10; /* no limit for t9, make it symmetric with t8 */
-	spec->t10 = 500 * 10;
+	spec.t1_t3 = 210 * 10;
+	spec.t8 = 50 * 10; /* no limit for t8, use t7 instead */
+	spec.t9 = 50 * 10; /* no limit for t9, make it symmetric with t8 */
+	spec.t10 = 500 * 10;
 	/* This one is special and actually in units of 100ms, but zero
 	 * based in the hw (so we need to add 100 ms). But the sw vbt
 	 * table multiplies it with 1000 to make it in units of 100usec,
 	 * too. */
-	spec->t11_t12 = (510 + 100) * 10;
-
-	intel_pps_dump_state(intel_dp, "spec", spec);
-}
-
-static void pps_init_delays(struct intel_dp *intel_dp)
-{
-	struct drm_i915_private *dev_priv = dp_to_i915(intel_dp);
-	struct edp_power_seq cur, vbt, spec,
-		*final = &intel_dp->pps.pps_delays;
-
-	lockdep_assert_held(&dev_priv->pps_mutex);
-
-	/* already initialized? */
-	if (final->t11_t12 != 0)
-		return;
+	spec.t11_t12 = (510 + 100) * 10;
 
-	pps_init_delays_cur(intel_dp, &cur);
-	pps_init_delays_vbt(intel_dp, &vbt);
-	pps_init_delays_spec(intel_dp, &spec);
+	intel_pps_dump_state(intel_dp, "vbt", &vbt);
 
 	/* Use the max of the register settings and vbt. If both are
 	 * unset, fall back to the spec limits. */
